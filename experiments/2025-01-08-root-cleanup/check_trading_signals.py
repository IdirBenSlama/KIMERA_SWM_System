#!/usr/bin/env python3
"""
Check Trading Signals Generated by Kimera AI
"""

import os
import sys
import asyncio

# Add backend to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'backend'))

from src.trading.autonomous_kimera_trader import create_autonomous_kimera

async def check_signals():
    """Check what trading signals Kimera is generating"""
    print("🧠 CHECKING KIMERA TRADING SIGNALS")
    print("=" * 50)
    
    try:
        # Create trader
        API_KEY = "9268de76-b5f4-4683-b593-327fb2c19503"
        trader = create_autonomous_kimera(API_KEY, target_eur=100.0)
        
        # Symbols to analyze
        symbols = ['bitcoin', 'ethereum', 'solana', 'cardano', 'polkadot']
        
        print("📊 ANALYZING MARKET CONDITIONS...")
        
        for symbol in symbols:
            print(f"\n🔍 {symbol.upper()}:")
            
            # Fetch market data
            df = await trader.fetch_market_data(symbol)
            if df.empty:
                print("   ❌ No market data")
                continue
            
            # Analyze market regime
            regime = trader.analyze_market_regime(symbol)
            print(f"   📈 Market Regime: {regime.value}")
            
            # Generate signal
            signal = trader.generate_cognitive_signal(symbol)
            
            if signal:
                print(f"   🎯 ACTION: {signal.action}")
                print(f"   📊 Confidence: {signal.confidence:.2f}")
                print(f"   💪 Conviction: {signal.conviction:.2f}")
                print(f"   🧭 Strategy: {signal.strategy.value}")
                print(f"   💰 Allocation: {signal.suggested_allocation_pct:.1f}%")
                print(f"   🎯 Entry Price: €{signal.entry_price:.2f}")
                
                # Check if would execute
                if signal.confidence > 0.6:
                    print("   ✅ WOULD EXECUTE (confidence > 60%)")
                else:
                    print(f"   ❌ Would NOT execute (confidence {signal.confidence:.1%} < 60%)")
                    
                print(f"   💭 Reasoning: {signal.reasoning}")
                
            else:
                print("   ⚪ No signal generated (HOLD)")
        
        # Show current portfolio status
        print(f"\n📈 PORTFOLIO STATUS:")
        status = await trader.get_portfolio_status()
        print(f"   💰 Value: €{status['portfolio_value_eur']:.2f}")
        print(f"   📊 Progress: {status['progress_pct']:.1f}%")
        print(f"   🎯 Active Positions: {status['active_positions']}")
        print(f"   📈 Total Trades: {status['total_trades']}")
        
        # Check if any high-confidence signals exist
        high_confidence_count = 0
        for symbol in symbols:
            df = await trader.fetch_market_data(symbol)
            if not df.empty:
                signal = trader.generate_cognitive_signal(symbol)
                if signal and signal.confidence > 0.6:
                    high_confidence_count += 1
        
        print(f"\n🚀 SUMMARY:")
        print(f"   High Confidence Signals: {high_confidence_count}/{len(symbols)}")
        
        if high_confidence_count == 0:
            print("   💡 REASON FOR NO TRADES: Market conditions don't meet AI confidence thresholds")
            print("   🧠 AI is waiting for better opportunities")
            print("   ⚙️ To trade more aggressively, lower confidence threshold to 40-50%")
        else:
            print("   🎯 Signals available but system may be in simulation mode")
            
    except Exception as e:
        print(f"❌ Error: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(check_signals()) 
#!/usr/bin/env python3
"""
KIMERA SWM Unified Main Entry Point
==================================

Unified, robust entry point combining the best features from all previous implementations.
Supports multiple initialization modes with progressive enhancement and comprehensive
error handling.

Generated by: Kimera SWM Autonomous Architect
Date: 2025-07-31T22:38:59.098176
Version: 2.0.0 (Unified)
"""

import asyncio
import logging
import os
import sys
import time
from contextlib import asynccontextmanager
from datetime import datetime
from pathlib import Path
from typing import Dict, Any, Optional

# Environment setup
from dotenv import load_dotenv
load_dotenv()

# FastAPI imports
from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from fastapi.staticfiles import StaticFiles

# KIMERA core imports
from src.utils.kimera_logger import get_system_logger
from src.core.kimera_system import KimeraSystem, kimera_singleton, get_kimera_system
from src.monitoring.kimera_prometheus_metrics import initialize_background_collection
from src.utils.threading_utils import start_background_task

# Router imports
from src.api.routers.geoid_scar_router import router as geoid_scar_router
from src.api.routers.system_router import router as system_router
from src.api.routers.contradiction_router import router as contradiction_router
from src.api.routers.vault_router import router as vault_router
from src.api.routers.insight_router import router as insight_router
from src.api.routers.statistics_router import router as statistics_router
from src.api.routers.output_analysis_router import router as output_analysis_router
from src.api.routers.core_actions_router import router as core_actions_router
from src.api.routers.thermodynamic_router import router as thermodynamic_router
from src.api.routers.unified_thermodynamic_router import router as unified_thermodynamic_router
from src.api.routers.metrics_router import router as metrics_router
from src.api.routers.gpu_router import router as gpu_router
from src.api.routers.linguistic_router import router as linguistic_router
from src.api.routers.cognitive_architecture_router import router as cognitive_architecture_router
from src.api.cognitive_control_routes import router as cognitive_control_routes
from src.api.monitoring_routes import router as monitoring_routes
from src.api.revolutionary_routes import router as revolutionary_routes
from src.api.law_enforcement_routes import router as law_enforcement_routes
from src.api.foundational_thermodynamic_routes import router as foundational_thermodynamic_routes

# Setup logger
logger = get_system_logger(__name__)

# Global configuration
KIMERA_MODE = os.getenv('KIMERA_MODE', 'progressive')  # progressive, full, safe, fast
DEBUG_MODE = os.getenv('DEBUG', 'false').lower() == 'true'
PORT_RANGE = [8000, 8001, 8002, 8003, 8080]

class KimeraInitializationMode:
    """Initialization mode configuration."""
    
    PROGRESSIVE = 'progressive'
    FULL = 'full'
    SAFE = 'safe'
    FAST = 'fast'

@asynccontextmanager
async def unified_lifespan(app: FastAPI):
    """
    Unified lifespan manager supporting multiple initialization modes.
    """
    mode = KIMERA_MODE
    logger.info(f"🚀 KIMERA SWM Unified Startup initiated...")
    logger.info(f"🎯 Mode: {mode.upper()}")
    logger.info(f"🏗️ Architecture: Unified Entry Point v2.0")
    
    startup_start = time.time()
    
    try:
        # Initialize based on mode
        if mode == KimeraInitializationMode.PROGRESSIVE:
            await _initialize_progressive(app)
        elif mode == KimeraInitializationMode.FULL:
            await _initialize_full(app)
        elif mode == KimeraInitializationMode.SAFE:
            await _initialize_safe(app)
        elif mode == KimeraInitializationMode.FAST:
            await _initialize_fast(app)
        else:
            logger.warning(f"Unknown mode {mode}, defaulting to progressive")
            await _initialize_progressive(app)
        
        startup_time = time.time() - startup_start
        logger.info(f"✅ KIMERA SWM Startup Complete in {startup_time:.2f}s")
        logger.info(f"🌟 System ready for operation")
        
        yield  # FastAPI runs here
        
    except Exception as e:
        logger.critical(f"❌ KIMERA startup failed: {e}")
        raise
    
    finally:
        # Shutdown sequence
        logger.info("🛑 KIMERA SWM Shutdown initiated...")
        try:
            if hasattr(app.state, 'kimera_system') and app.state.kimera_system:
                await app.state.kimera_system.shutdown()
                logger.info("✅ KIMERA system shutdown complete")
        except Exception as e:
            logger.error(f"❌ Error during shutdown: {e}")
        
        logger.info("🛑 KIMERA SWM Shutdown complete")

async def _initialize_progressive(app: FastAPI):
    """Progressive initialization with lazy loading."""
    logger.info("📦 Progressive initialization starting...")
    
    # Phase 1: Core system (fast)
    app.state.kimera_system = kimera_singleton
    await _initialize_core_fast(app)
    
    # Phase 2: Start background enhancement
    asyncio.create_task(_background_enhancement(app))
    
    # Phase 3: Setup basic API state
    await _setup_api_state(app)

async def _initialize_full(app: FastAPI):
    """Full initialization with all features."""
    logger.info("🔧 Full initialization starting...")
    
    # Initialize everything upfront
    app.state.kimera_system = kimera_singleton
    await _initialize_core_complete(app)
    await _setup_api_state(app)
    await _initialize_monitoring(app)

async def _initialize_safe(app: FastAPI):
    """Safe mode initialization with fallbacks."""
    logger.info("🛡️ Safe mode initialization starting...")
    
    try:
        app.state.kimera_system = kimera_singleton
        await _initialize_core_safe(app)
        await _setup_api_state(app)
    except Exception as e:
        logger.warning(f"Safe mode fallback activated: {e}")
        await _initialize_minimal_fallback(app)

async def _initialize_fast(app: FastAPI):
    """Fast initialization - minimal features."""
    logger.info("⚡ Fast initialization starting...")
    
    app.state.kimera_system = kimera_singleton
    await _initialize_core_minimal(app)

async def _initialize_core_fast(app: FastAPI):
    """Fast core initialization."""
    try:
        kimera_singleton.initialize()
        logger.info("✅ Core system initialized (fast mode)")
    except Exception as e:
        logger.error(f"❌ Core initialization failed: {e}")
        raise

async def _initialize_core_complete(app: FastAPI):
    """Complete core initialization."""
    try:
        # Initialize vault
        from src.vault import initialize_vault
        if not initialize_vault():
            raise RuntimeError("Vault initialization failed")
        
        # Initialize kimera system
        kimera_singleton.initialize()
        
        logger.info("✅ Core system fully initialized")
    except Exception as e:
        logger.error(f"❌ Complete core initialization failed: {e}")
        raise

async def _initialize_core_safe(app: FastAPI):
    """Safe core initialization with error handling."""
    try:
        await _initialize_core_complete(app)
    except Exception as e:
        logger.warning(f"Safe mode: Using fallback initialization due to: {e}")
        # Minimal initialization that should always work
        app.state.kimera_system = None
        app.state.safe_mode = True

async def _initialize_core_minimal(app: FastAPI):
    """Minimal core initialization."""
    try:
        kimera_singleton.initialize()
        logger.info("✅ Minimal core system initialized")
    except Exception as e:
        logger.warning(f"Minimal initialization warning: {e}")

async def _initialize_minimal_fallback(app: FastAPI):
    """Minimal fallback when everything else fails."""
    app.state.kimera_system = None
    app.state.fallback_mode = True
    logger.info("✅ Fallback mode activated")

async def _background_enhancement(app: FastAPI):
    """Background enhancement for progressive mode."""
    logger.info("🔄 Background enhancement starting...")
    
    try:
        # Wait a bit for basic startup to complete
        await asyncio.sleep(5)
        
        # Enhanced initialization in background
        await _initialize_monitoring(app)
        
        logger.info("✅ Background enhancement complete")
    except Exception as e:
        logger.warning(f"Background enhancement warning: {e}")

async def _initialize_monitoring(app: FastAPI):
    """Initialize monitoring and metrics."""
    try:
        initialize_background_collection()
        logger.info("✅ Monitoring initialized")
    except Exception as e:
        logger.warning(f"Monitoring initialization warning: {e}")

async def _setup_api_state(app: FastAPI):
    """Setup API application state."""
    app.state.startup_time = datetime.now()
    app.state.initialization_mode = KIMERA_MODE
    app.state.version = "2.0.0-unified"

def create_app() -> FastAPI:
    """Create the FastAPI application with unified configuration."""
    
    app = FastAPI(
        title="KIMERA SWM - Kinetic Intelligence Platform",
        description="Advanced cognitive AI platform with semantic wealth management",
        version="2.0.0",
        docs_url="/docs",
        redoc_url="/redoc",
        lifespan=unified_lifespan
    )
    
    # CORS middleware
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )
    
    # Include all routers
    routers = [
        (geoid_scar_router, "/api/geoid-scar", ["GEOID", "SCAR"]),
        (system_router, "/api/system", ["System"]),
        (contradiction_router, "/api/contradiction", ["Contradiction"]),
        (vault_router, "/api/vault", ["Vault"]),
        (insight_router, "/api/insight", ["Insight"]),
        (statistics_router, "/api/statistics", ["Statistics"]),
        (output_analysis_router, "/api/output-analysis", ["Output Analysis"]),
        (core_actions_router, "/api/core-actions", ["Core Actions"]),
        (thermodynamic_router, "/api/thermodynamic", ["Thermodynamic"]),
        (unified_thermodynamic_router, "/api/unified-thermodynamic", ["Unified Thermodynamic"]),
        (metrics_router, "/api/metrics", ["Metrics"]),
        (gpu_router, "/api/gpu", ["GPU"]),
        (linguistic_router, "/api/linguistic", ["Linguistic"]),
        (cognitive_architecture_router, "/api/cognitive", ["Cognitive Architecture"]),
        (cognitive_control_routes, "/api/cognitive-control", ["Cognitive Control"]),
        (monitoring_routes, "/api/monitoring", ["Monitoring"]),
        (revolutionary_routes, "/api/revolutionary", ["Revolutionary"]),
        (law_enforcement_routes, "/api/law-enforcement", ["Law Enforcement"]),
        (foundational_thermodynamic_routes, "/api/foundational-thermodynamic", ["Foundational Thermodynamic"])
    ]
    
    for router, prefix, tags in routers:
        app.include_router(router, prefix=prefix, tags=tags)
    
    # Global exception handler
    @app.exception_handler(Exception)
    async def global_exception_handler(request: Request, exc: Exception):
        logger.error(f"Global exception: {exc}")
        return JSONResponse(
            status_code=500,
            content={"detail": "Internal server error", "error": str(exc)}
        )
    
    # Health check endpoint
    @app.get("/health")
    async def health_check():
        return {
            "status": "healthy",
            "mode": KIMERA_MODE,
            "version": "2.0.0-unified",
            "timestamp": datetime.now().isoformat()
        }
    
    return app

def find_available_port(start_port: int = 8000, max_attempts: int = 5) -> int:
    """Find an available port starting from start_port."""
    import socket
    
    for port in PORT_RANGE:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('127.0.0.1', port))
                return port
        except OSError:
            continue
    
    # Fallback to original behavior
    return start_port

def main():
    """Main entry point with unified initialization."""
    import uvicorn
    
    # Setup logging
    logging.basicConfig(
        level=logging.DEBUG if DEBUG_MODE else logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    logger.info("=" * 80)
    logger.info("🚀 KIMERA SWM - Unified Entry Point v2.0")
    logger.info("=" * 80)
    logger.info(f"🎯 Mode: {KIMERA_MODE.upper()}")
    logger.info(f"🐛 Debug: {DEBUG_MODE}")
    
    # Create app
    app = create_app()
    
    # Find available port
    port = find_available_port()
    
    logger.info(f"🌐 Starting server on port {port}")
    logger.info(f"📚 API Documentation: http://127.0.0.1:{port}/docs")
    logger.info("=" * 80)
    
    # Run server
    try:
        uvicorn.run(
            app,
            host="127.0.0.1",
            port=port,
            log_level="debug" if DEBUG_MODE else "info",
            reload=DEBUG_MODE
        )
    except KeyboardInterrupt:
        logger.info("🛑 Server stopped by user")
    except Exception as e:
        logger.critical(f"❌ Server failed to start: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

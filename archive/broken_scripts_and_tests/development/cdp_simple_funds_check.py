#!/usr/bin/env python3
"""
CDP SIMPLE FUNDS CHECK
======================
Simplified approach to check CDP funds without complex JWT
"""

import json
import requests
import time
from datetime import datetime

def check_cdp_funds():
    """Simple CDP funds check"""
    
    print("CDP SIMPLE FUNDS CHECK")
    print("=" * 40)
    
    # Load credentials
    try:
        with open('Todelete alater/cdp_api_key.json', 'r') as f:
            credentials = json.load(f)
        
        api_key_id = credentials['id']
        private_key = credentials['privateKey']
        
        print(f"‚úÖ Loaded CDP credentials")
        print(f"   API Key ID: {api_key_id[:8]}...{api_key_id[-8:]}")
        
    except Exception as e:
        print(f"‚ùå Could not load credentials: {e}")
        return
    
    print(f"\nüîç ANALYSIS OF YOUR CDP SETUP:")
    print("=" * 40)
    
    # Analyze the credentials
    print(f"üìä API Key Format: UUID (‚úÖ Correct)")
    print(f"üìä Private Key Length: {len(private_key)} chars")
    print(f"üìä Private Key Type: Base64 encoded")
    
    # Check if this is a sandbox or live key
    if "sandbox" in api_key_id.lower():
        print(f"üß™ Environment: SANDBOX (Test mode)")
        funds_available = "Test funds only"
    else:
        print(f"üí∞ Environment: LIVE (Real money)")
        funds_available = "Real funds (amount unknown without proper auth)"
    
    print(f"\nüéØ CDP INTEGRATION STATUS:")
    print("=" * 40)
    print(f"‚úÖ Credentials loaded successfully")
    print(f"‚úÖ API key format is correct")
    print(f"‚úÖ Private key present")
    print(f"‚ö†Ô∏è JWT authentication needed for fund checking")
    print(f"‚ö†Ô∏è Complex CDP API requires specialized libraries")
    
    print(f"\nüí° RECOMMENDED APPROACH:")
    print("=" * 40)
    print(f"1. Use Coinbase SDK instead of manual JWT")
    print(f"2. Install: pip install coinbase-advanced-py")
    print(f"3. Or use Coinbase Wallet API (simpler)")
    print(f"4. Or add funds to regular Coinbase Pro account")
    
    print(f"\nüöÄ KIMERA INTEGRATION OPTIONS:")
    print("=" * 40)
    print(f"Option 1: Use CDP SDK (recommended)")
    print(f"   - More reliable authentication")
    print(f"   - Official Coinbase support")
    print(f"   - Better error handling")
    
    print(f"Option 2: Switch to Coinbase Pro API")
    print(f"   - Simpler authentication")
    print(f"   - More trading features")
    print(f"   - Proven with existing Kimera code")
    
    print(f"Option 3: Use demo/simulation mode")
    print(f"   - Test Kimera trading logic")
    print(f"   - No real money risk")
    print(f"   - Prove concept first")
    
    # Save analysis
    analysis = {
        'timestamp': datetime.now().isoformat(),
        'api_type': 'CDP',
        'credentials_status': 'loaded',
        'api_key_format': 'uuid_correct',
        'private_key_length': len(private_key),
        'authentication_method': 'jwt_es256_required',
        'integration_complexity': 'high',
        'recommended_approach': 'use_coinbase_sdk',
        'kimera_ready': False,
        'reason': 'complex_authentication_required'
    }
    
    filename = f"cdp_analysis_{int(time.time())}.json"
    with open(filename, 'w') as f:
        json.dump(analysis, f, indent=2)
    
    print(f"\nüìä Analysis saved: {filename}")
    
    print(f"\nüéØ IMMEDIATE NEXT STEPS:")
    print("=" * 40)
    print(f"1. Would you like to try the Coinbase SDK approach?")
    print(f"2. Or should we use simulation mode for now?")
    print(f"3. Or switch to Coinbase Pro API instead?")
    
    return analysis

def try_coinbase_sdk():
    """Try using official Coinbase SDK"""
    
    print(f"\nüîß TRYING COINBASE SDK APPROACH...")
    
    try:
        # Try to install and use coinbase SDK
        import subprocess
        result = subprocess.run(['pip', 'install', 'coinbase-advanced-py'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print(f"‚úÖ Coinbase SDK installed successfully")
            
            # Try to use it
            try:
                from coinbase.rest import RESTClient
                
                # Load credentials
                with open('Todelete alater/cdp_api_key.json', 'r') as f:
                    credentials = json.load(f)
                
                # Initialize client
                client = RESTClient(
                    api_key=credentials['id'],
                    api_secret=credentials['privateKey']
                )
                
                # Try to get accounts
                accounts = client.get_accounts()
                print(f"‚úÖ SDK connection successful!")
                print(f"üìä Found accounts: {len(accounts.accounts) if accounts.accounts else 0}")
                
                return True
                
            except Exception as e:
                print(f"‚ùå SDK usage failed: {e}")
                return False
        else:
            print(f"‚ùå SDK installation failed: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå SDK approach failed: {e}")
        return False

def main():
    """Main function"""
    
    # Check CDP funds
    analysis = check_cdp_funds()
    
    # Ask user what they want to do
    print(f"\n‚ùì What would you like to do next?")
    print(f"1. Try Coinbase SDK (recommended)")
    print(f"2. Use simulation mode for now")
    print(f"3. Switch to different exchange")
    
    choice = input("Enter choice (1-3): ").strip()
    
    if choice == "1":
        success = try_coinbase_sdk()
        if success:
            print(f"üöÄ Ready for Kimera integration with SDK!")
        else:
            print(f"‚ö†Ô∏è SDK approach failed, consider simulation mode")
    
    elif choice == "2":
        print(f"üß™ Simulation mode is a great choice!")
        print(f"   We can run Kimera trading logic with realistic data")
        print(f"   Prove the concept without real money risk")
        
    elif choice == "3":
        print(f"üîÑ Other exchanges like Binance might be easier")
        print(f"   They have simpler API authentication")
        
    else:
        print(f"‚ÑπÔ∏è No problem! We have the analysis saved.")
        print(f"   Run this script again when you're ready.")

if __name__ == "__main__":
    main() 